{"version":3,"file":"static/js/192.10b3d79c.chunk.js","mappings":"+MAEA,MAAMA,EAAYC,EAAAA,MAAW,IAAM,wDAC7BC,EAAaD,EAAAA,MAAW,IAAM,6BAC9BE,EAAQF,EAAAA,MAAW,IAAM,gCACzBG,EAAUH,EAAAA,MAAW,IAAM,gCAC3BI,EAAcJ,EAAAA,MAAW,IAAM,6BAC/BK,EAAQL,EAAAA,MAAW,IAAM,gCACzBM,EAAQN,EAAAA,MAAW,IAAM,gCAe/B,EAZe,CACb,CAAEO,KAAM,IAAKC,OAAO,EAAMC,KAAM,QAChC,CAAEF,KAAM,SAAUE,KAAM,QAASC,QAJrBV,EAAAA,MAAW,IAAM,iCAK7B,CAAEO,KAAM,aAAcE,KAAM,YAAaC,QAASX,GAClD,CAAEQ,KAAM,cAAeE,KAAM,aAAcC,QAAST,GACpD,CAAEM,KAAM,SAAUE,KAAM,QAASC,QAASR,GAC1C,CAAEK,KAAM,SAAUE,KAAM,QAASC,QAASL,GAC1C,CAAEE,KAAM,WAAYE,KAAM,UAAWC,QAASP,GAC9C,CAAEI,KAAM,gBAAiBE,KAAM,cAAeC,QAASN,GACvD,CAAEG,KAAM,SAAUE,KAAM,QAASC,QAASJ,I,sCCb5C,MAAMK,EAAaA,KAEfC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,IAAE,EAAAC,UACZH,EAAAA,EAAAA,KAACI,EAAAA,SAAQ,CAACC,UAAUL,EAAAA,EAAAA,KAACM,EAAAA,GAAQ,CAACC,MAAM,YAAaJ,UAC/CK,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAAAN,SAAA,CACJO,EAAOC,KAAI,CAACC,EAAOC,IAEhBD,EAAMd,UACJE,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CAEJnB,KAAMiB,EAAMjB,KACZC,MAAOgB,EAAMhB,MACbC,KAAMe,EAAMf,KACZC,SAASE,EAAAA,EAAAA,KAACY,EAAMd,QAAO,KAJlBe,MASbb,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CAACnB,KAAK,IAAIG,SAASE,EAAAA,EAAAA,KAACe,EAAAA,GAAQ,CAACC,GAAG,YAAYC,SAAO,aAOnE,EAAe7B,EAAAA,KAAWW,G,mGCvB1B,MA6DA,EA7D0BmB,KACxB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAQvCG,EAAAA,EAAAA,YAAU,KACRC,GAAc,GACb,IAEH,MAAMA,EAAeC,UACnB,IACE,MACEC,MAAM,KAAER,UACAS,EAAAA,EAASC,KAAKC,WAClB,KAAEH,EAAI,MAAEI,SAAgBH,EAAAA,EAASI,KAAK,YAAYC,OAAO,KAAKC,GAAG,KAAMf,EAAKgB,IAAIC,SAEtF,GAAIL,EACF,MAAMA,EAGRR,EAAWI,GAAQ,GACrB,CAAE,MAAOI,GACPM,QAAQN,MAAM,0BAA2BA,EAAMO,QACjD,GAOF,OACEhC,EAAAA,EAAAA,MAACiC,EAAAA,GAAS,CAACC,QAAQ,WAAUvC,SAAA,EAC3BH,EAAAA,EAAAA,KAAC2C,EAAAA,GAAe,CAACC,UAAU,aAAaC,UAAU,OAAOC,OAAO,EAAM3C,UACpEH,EAAAA,EAAAA,KAAC+C,EAAAA,GAAO,CAACC,IAAKxB,EAAQyB,YAAcC,EAAQC,KAAK,UAEnD3C,EAAAA,EAAAA,MAAC4C,EAAAA,GAAa,CAACP,UAAU,OAAOD,UAAU,aAAYzC,SAAA,EACpDH,EAAAA,EAAAA,KAACqD,EAAAA,GAAe,CAACR,UAAU,4BAA2B1C,SAAC,cACvDK,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAXDC,KAChBrC,EAAS,WAAW,EAUkBhB,SAAA,EAClCH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAASd,UAAU,SAAS,cAG3CrC,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACM,KAAK,IAAGzD,SAAA,EACrBH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMG,EAAAA,EAAahB,UAAU,SAAS,eAG/C7C,EAAAA,EAAAA,KAAC8D,EAAAA,GAAgB,KACjBtD,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QA/CN3B,UACXN,EAAQ,MACRyC,aAAaC,WAAW,yBAClBlC,EAAAA,EAASC,KAAKkC,SAAS,EA4CI9D,SAAA,EAC7BH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMQ,EAAAA,EAAerB,UAAU,SAAS,iBAIzC,E,mDCZhB,EAhCkBsB,MACC/C,EAAAA,EAAAA,MAAjB,MACMgD,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMF,cAEjD,OACEtE,EAAAA,EAAAA,KAACyE,EAAAA,GAAO,CAACC,SAAS,SAAS7B,UAAU,OAAM1C,UACzCK,EAAAA,EAAAA,MAACP,EAAAA,GAAU,CAAC0E,OAAK,EAAAxE,SAAA,EACfH,EAAAA,EAAAA,KAAC4E,EAAAA,GAAc,CACb/B,UAAU,OACVU,QAASA,IAAMa,EAAS,CAAES,KAAM,MAAOP,aAAcA,IAAenE,UAEpEH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMoB,EAAAA,EAAS3B,KAAK,UAE7BnD,EAAAA,EAAAA,KAAC+E,EAAAA,GAAY,CAAClC,UAAU,oBAAoB7B,GAAG,OAG/ChB,EAAAA,EAAAA,KAACgF,EAAAA,GAAU,CAACnC,UAAU,2BAA0B1C,UAC9CH,EAAAA,EAAAA,KAACiF,EAAAA,GAAQ,CAAA9E,UACPH,EAAAA,EAAAA,KAACkF,EAAAA,GAAQ,CAAClE,GAAG,aAAamE,UAAWC,EAAAA,GAAQjF,SAAC,mBAKlDH,EAAAA,EAAAA,KAACgF,EAAAA,GAAU,CAACnC,UAAU,OAAM1C,UAC1BH,EAAAA,EAAAA,KAACkB,EAAiB,UAGd,EC5CDmE,EAAgBC,IAAgB,IAAf,MAAEC,GAAOD,EACrC,MAAME,GAAWC,EAAAA,EAAAA,MACXC,EAAUA,CAAC7F,EAAM6D,EAAMiC,KAEzBnF,EAAAA,EAAAA,MAAAoF,EAAAA,SAAA,CAAAzF,SAAA,CACGuD,GAAQA,EACR7D,GAAQA,EACR8F,IACC3F,EAAAA,EAAAA,KAAC6F,EAAAA,GAAM,CAACtF,MAAOoF,EAAMpF,MAAOsC,UAAU,UAAS1C,SAC5CwF,EAAMG,UAOXC,EAAUA,CAACC,EAAMC,KACrB,MAAM,UAAEd,EAAS,KAAEtF,EAAI,MAAE8F,EAAK,KAAEjC,KAASwC,GAASF,EAC5CG,EAAYhB,EAClB,OACEiB,EAAAA,EAAAA,eAACD,EAAS,IACHD,EAAKlF,KACPkF,EAAKX,OAAS,CACbJ,UAAWC,EAAAA,IAEfiB,IAAKJ,KACDC,GAEHR,EAAQ7F,EAAM6D,EAAMiC,GACX,EAGVW,EAAWA,CAACN,EAAMC,KAAW,IAADM,EAChC,MAAM,UAAEpB,EAAS,KAAEtF,EAAI,KAAE6D,EAAI,GAAE1C,KAAOkF,GAASF,EACzCG,EAAYhB,EAClB,OACEnF,EAAAA,EAAAA,KAACmG,EAAS,CACRtF,IAAK2F,OAAOP,GAEZQ,QAASf,EAAQ7F,EAAM6D,GACvBgD,QAASlB,EAASmB,SAASC,WAAW5F,MAClCkF,EAAI/F,SAEG,QAFHoG,EAEPP,EAAKT,aAAK,IAAAgB,OAAA,EAAVA,EAAY5F,KAAI,CAACqF,EAAMC,IACtBD,EAAKT,MAAQe,EAASN,EAAMC,GAASF,EAAQC,EAAMC,MANhDA,EAQK,EAIhB,OACEjG,EAAAA,EAAAA,KAACZ,EAAAA,SAAc,CAAAe,SACZoF,GACCA,EAAM5E,KAAI,CAACqF,EAAMC,IAAWD,EAAKT,MAAQe,EAASN,EAAMC,GAASF,EAAQC,EAAMC,MAClE,E,sDCnDrB,MAkCA,EAlCa,CACX,CACEd,UAAWF,EAAAA,GACXpF,KAAM,YACNmB,GAAI,aACJ0C,MAAM1D,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMmD,EAAAA,EAAgBC,gBAAgB,cAErD,CACE3B,UAAWF,EAAAA,GACXpF,KAAM,aACNmB,GAAI,cACJ0C,MAAM1D,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMqD,EAAAA,EAAWD,gBAAgB,cAEhD,CACE3B,UAAWF,EAAAA,GACXpF,KAAM,QACNmB,GAAI,SACJ0C,MAAM1D,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMqD,EAAAA,EAAWD,gBAAgB,cAEhD,CACE3B,UAAWF,EAAAA,GACXpF,KAAM,QACNmB,GAAI,SACJ0C,MAAM1D,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMsD,EAAAA,EAAaF,gBAAgB,cAGlD,CACE3B,UAAWF,EAAAA,GACXpF,KAAM,QACNmB,GAAI,SACJ0C,MAAM1D,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMsD,EAAAA,EAAaF,gBAAgB,eCxB9CG,EAAaA,KACjB,MAAM7C,GAAWC,EAAAA,EAAAA,MACX6C,GAAa3C,EAAAA,EAAAA,KAAaC,GAAUA,EAAM2C,oBAC1C7C,GAAcC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMF,cAEjD,OACE9D,EAAAA,EAAAA,MAAC4G,EAAAA,GAAQ,CACP1C,SAAS,QACTwC,WAAYA,EACZR,QAASpC,EACT+C,gBAAkBX,IAChBtC,EAAS,CAAES,KAAM,MAAOP,YAAaoC,GAAU,EAC/CvG,SAAA,EAEFK,EAAAA,EAAAA,MAAC8G,EAAAA,GAAa,CAACzE,UAAU,mBAAmB7B,GAAG,IAAGb,SAAA,EAChDH,EAAAA,EAAAA,KAAA,OAAKgD,IAAKuE,EAAMC,IAAI,OAAO3E,UAAU,0BAA0B4E,OAAQ,MACvEzH,EAAAA,EAAAA,KAAA,OAAKgD,IAAKuE,EAAMC,IAAI,OAAO3E,UAAU,4BAA4B4E,OAAQ,SAE3EzH,EAAAA,EAAAA,KAAC0H,EAAAA,GAAW,CAAAvH,UACVH,EAAAA,EAAAA,KAAC2H,EAAAA,EAAS,CAAAxH,UACRH,EAAAA,EAAAA,KAACqF,EAAa,CAACE,MAAOqC,SAG1B5H,EAAAA,EAAAA,KAAC6H,EAAAA,GAAe,CACdhF,UAAU,mBACVU,QAASA,IAAMa,EAAS,CAAES,KAAM,MAAOsC,mBAAoBD,QAEpD,EAIf,EAAe9H,EAAAA,KAAW6H,G,+DCxB1B,MAsjBA,EAtjByBa,KACvB,MAAOC,EAAaC,IAAkBzG,EAAAA,EAAAA,WAAS,IACxC0G,EAAgBC,IAAqB3G,EAAAA,EAAAA,WAAS,IAC9C4G,EAAeC,IAAoB7G,EAAAA,EAAAA,WAAS,IAC5C8G,EAAaC,IAAkB/G,EAAAA,EAAAA,WAAS,IACxCgH,EAAQC,IAAajH,EAAAA,EAAAA,UAAS,OAC9BkH,EAAYC,IAAiBnH,EAAAA,EAAAA,UAAS,KACtCoH,EAAWC,IAAgBrH,EAAAA,EAAAA,UAAS,KACpCsH,EAAOC,IAAYvH,EAAAA,EAAAA,UAAS,KAC5BwH,EAAaC,IAAkBzH,EAAAA,EAAAA,UAAS,KAExC0H,EAAUC,IAAe3H,EAAAA,EAAAA,UAAS,KAClC4H,EAAeC,IAAoB7H,EAAAA,EAAAA,UAAS,IAC5C8H,EAAaC,IAAkB/H,EAAAA,EAAAA,UAAS,IAE/CG,EAAAA,EAAAA,YAAU,KACR6H,IACAC,IACAC,IACAC,GAAY,GACX,IAIH,MAAMvI,GAAWC,EAAAA,EAAAA,MAEXmI,EAAc3H,UAClB,IACE,MAAQC,MAAM,KAAER,UAAiBS,EAAAA,EAASC,KAAKC,UAC/CwG,EAAUnH,EAAKgB,GACjB,CAAE,MAAOJ,GACPM,QAAQN,MAAM,0BAA2BA,EAAMO,QACjD,GAIIiH,EAAiB7H,UACrB,IACE,MAAM,KAAEC,EAAI,MAAEI,SAAgBH,EAAAA,EAC3BI,KAAK,cACLC,OAAO,YACPC,GAAG,SAAU,GAEhB,GAAIH,EACF,MAAMA,EAGR,MAAM0H,EAAqB9H,EAAKlB,KAAIiJ,IAAI,CACtCvH,GAAIuH,EAAK/J,KACTA,KAAM+J,EAAK/J,KAAKgK,OAAO,GAAGC,cAAgBF,EAAK/J,KAAKkK,MAAM,OAE5DnB,EAAae,GAAsB,GACrC,CAAE,MAAO1H,GACPM,QAAQN,MAAM,wBAAyBA,EAAMO,QAC/C,GAGIwH,GAAaC,EAAAA,EAAAA,UACbC,GAAYD,EAAAA,EAAAA,UAEZE,IADeF,EAAAA,EAAAA,WACGA,EAAAA,EAAAA,WAsBlBT,EAAkB5H,UACtB,IACE,MAAM,KAAEC,EAAI,MAAEI,SAAgBH,EAAAA,EAC3BI,KAAK,cACLC,OAAO,YACPC,GAAG,SAAU,GAEhB,GAAIH,EACF,MAAMA,EAGR,MAAMmI,EAAsBvI,EAAKlB,KAAI0J,IAAQ,CAC3ChI,GAAIgI,EAAShI,GACbxC,KAAMwK,EAASxK,KAAKgK,OAAO,GAAGC,cAAgBO,EAASxK,KAAKkK,MAAM,OAEpErB,EAAc0B,GAAuB,GACvC,CAAE,MAAOnI,GACPM,QAAQN,MAAM,6BAA8BA,EAAMO,QACpD,GAGI8H,GAAkBL,EAAAA,EAAAA,UAClBM,GAAqBN,EAAAA,EAAAA,UAkDrBO,GAAoBP,EAAAA,EAAAA,UACpBQ,GAAqBR,EAAAA,EAAAA,UA6BrBP,EAAa9H,UACjB,IACE,MACEC,MAAM,KAAER,UACAS,EAAAA,EAASC,KAAKC,WAElB,KAAEH,EAAI,MAAEI,SAAgBH,EAAAA,EAC3BI,KAAK,SACLC,OAAO,KACPuI,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAI1I,EACF,MAAMA,EAGR,MAAM2I,EAAU,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIhJ,EAAKiJ,OAAQD,IAAK,CAEpC,IAAIE,EAAM,CAAC,EACXA,EAAW,MAAIlJ,EAAKgJ,GAAGxI,GACvB0I,EAAW,MAAIlJ,EAAKgJ,GAAGhL,KACvBkL,EAAc,SAAIlJ,EAAKgJ,GAAGG,SAC1BJ,EAAQK,KAAKF,EACf,CAEA/B,EAAe4B,GAEf9B,EAASjH,GAAQ,GACnB,CAAE,MAAOI,GACPM,QAAQN,MAAM,wBAAyBA,EAAMO,QAC/C,GAmCE0I,GAAiBjB,EAAAA,EAAAA,WAkDjB,aACJkB,EAAY,QACZC,EAAO,QACPC,EAAO,MACPC,EAAK,KACLC,EAAI,UACJC,GAAS,MACTC,GAAK,MACLC,GAAK,MACLC,MA1DyB1B,EAAAA,EAAAA,WA2DvB2B,EAAAA,EAAAA,cAAa,CAAEC,WAAW,KAE9B,OACErL,EAAAA,EAAAA,MAAAoF,EAAAA,SAAA,CAAAzF,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAK8L,MAAO,CAAEpH,SAAU,QAASqH,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,MAAO9L,UAC7EK,EAAAA,EAAAA,MAACiC,EAAAA,GAAS,CAACC,QAAQ,oBAAmBvC,SAAA,EACpCH,EAAAA,EAAAA,KAAC2C,EAAAA,GAAe,CAACC,UAAU,aAAaC,UAAU,OAAOC,OAAO,EAAM3C,UACpEH,EAAAA,EAAAA,KAAA,OACE8L,MAAO,CACLI,MAAO,OACPzE,OAAQ,OACR0E,aAAc,MAEdC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAChBnM,UAEFH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAM6I,EAAAA,EAASpJ,KAAK,KAAK2I,MAAO,CAAEvL,MAAO,gBAGpDC,EAAAA,EAAAA,MAAC4C,EAAAA,GAAa,CAACP,UAAU,OAAOD,UAAU,aAAYzC,SAAA,EACpDK,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAASA,IAAM+E,GAAgBD,GAAalI,SAAA,EACzDH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAASd,UAAU,SAAS,eAG3CrC,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAASA,IAAMyE,GAAgBD,GAAa5H,SAAA,EACzDH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMG,EAAAA,EAAahB,UAAU,SAAS,eAG/CrC,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAASA,IAAM6E,GAAkBD,GAAehI,SAAA,EAC7DH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMG,EAAAA,EAAahB,UAAU,SAAS,oBAG/CrC,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAASA,IAAM2E,GAAmBD,GAAgB9H,SAAA,EAC/DH,EAAAA,EAAAA,KAACyD,EAAAA,EAAK,CAACC,KAAMG,EAAAA,EAAahB,UAAU,SAAS,2BAQrDrC,EAAAA,EAAAA,MAACgM,EAAAA,GAAM,CACLC,SAAS,SACT/F,QAASqB,EACT2E,QAASA,IAAM1E,GAAe,GAC9B,kBAAgB,eAAc7H,SAAA,EAE9BH,EAAAA,EAAAA,KAAC2M,EAAAA,GAAY,CAAAxM,UACXH,EAAAA,EAAAA,KAAC4M,EAAAA,GAAW,CAACvK,GAAG,eAAclC,SAAC,gBAEjCH,EAAAA,EAAAA,KAAC6M,EAAAA,GAAU,CAAA1M,UACTK,EAAAA,EAAAA,MAAA,QAAMsM,SA5SalL,UACvB,MAAMmL,EAAQ/C,EAAWgD,QAAQC,MAC3BpI,EAAOqF,EAAU8C,QAAQC,MACzBC,EAAWC,MAASC,OAAO,oBAC3BC,EAAclD,EAAgB6C,QAAQC,MACtCK,EAAS/E,QAEGzG,EAAAA,EACfI,KAAK,SACLqL,OAAO,CAAER,QAAOlI,OAAMqI,WAAUG,cAAaG,QAASF,IACtDnL,OAAO,KACPG,SAEH0F,GAAe,GAEf7G,EAAS,SAAS,EA6RmBhB,SAAA,EAC/BH,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe4K,IAAKzD,EAAY0D,YAAY,QAAQC,UAAU,EAAM9I,KAAK,YAE5F7E,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,UAAQ6C,UAAU,eAAe4K,IAAKvD,EAAU/J,SAC7CwI,EAAUhI,KAAIiN,IACb5N,EAAAA,EAAAA,KAAA,UAA0BiN,MAAOW,EAASvL,GAAGlC,SAC1CyN,EAAS/N,MADC+N,EAASvL,WAO5BrC,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe4K,IAAKtD,EAAiBuD,YAAY,WAAW7I,KAAK,SAAS8I,UAAU,OAEvGnN,EAAAA,EAAAA,MAACqN,EAAAA,GAAY,CAAA1N,SAAA,EACXH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,YAAYgD,QAASA,IAAMyE,GAAe,GAAO7H,SAAC,WAGjEH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,UAAUsE,KAAK,SAAQ1E,SAAC,yBAQ/CK,EAAAA,EAAAA,MAACgM,EAAAA,GAAM,CACLC,SAAS,SACT/F,QAASuB,EACTyE,QAASA,IAAMxE,GAAkB,GACjC,kBAAgB,mBAAkB/H,SAAA,EAElCH,EAAAA,EAAAA,KAAC2M,EAAAA,GAAY,CAAAxM,UACXH,EAAAA,EAAAA,KAAC4M,EAAAA,GAAW,CAACvK,GAAG,mBAAkBlC,SAAC,oBAErCH,EAAAA,EAAAA,KAAC6M,EAAAA,GAAU,CAAA1M,UACTK,EAAAA,EAAAA,MAAA,QAAMsM,SAjSgBlL,UAC1B,IACE,QAAmBmM,GAAhB5C,GAA6C,GAAhBA,EAE9B,YADA7B,EAAe,GAGjBA,EAAe,GAEf,MAAMyD,EAAQxC,EAAmByC,QAAQC,MACnCe,EAAc1D,EAAgB0C,QAAQC,MAGtCK,EAAS/E,EAIT0F,EAAed,MACfe,EAAiBD,EAAaE,QAAQC,SAASjD,EAAc,iBAEjDrJ,EAAAA,EACfI,KAAK,oBACLqL,OAAO,CACNR,QACAiB,cACAd,SAAUgB,EAAed,OAAO,uBAChCiB,OAAQJ,EAAab,OAAO,uBAC5BI,QAASF,IACVnL,OAAO,KACPG,SAEH4F,GAAkB,GAElB/G,EAAS,cAEX,CAAC,MAAMmN,GACL/L,QAAQgM,IAAID,EACd,GA6PwCnO,SAAA,EAClCH,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe4K,IAAKlD,EAAoBmD,YAAY,QAAQ7I,KAAK,OAAO8I,UAAU,OAErG3N,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,UAAQ6C,UAAU,eAAe4K,IAAKnD,EAAgBnK,SACnDsI,EAAW9H,KAAI0J,IACdrK,EAAAA,EAAAA,KAAA,UAA0BiN,MAAO5C,EAAShI,GAAGlC,SAC1CkK,EAASxK,MADCwK,EAAShI,WAmB5BrC,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBK,EAAAA,EAAAA,MAAA,OAAKsL,MAAO,CAAC0C,UAAW,UAAUrO,SAAA,EAChCK,EAAAA,EAAAA,MAAA,OAAKsL,MAAO,CAAC2C,SAAU,SAAStO,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,QAAAG,SAAOoL,IAAY,KAACvL,EAAAA,EAAAA,KAAA,QAAAG,SAAOmL,IAAa,KAACtL,EAAAA,EAAAA,KAAA,QAAAG,SAAOkL,IAAe,KAACrL,EAAAA,EAAAA,KAAA,QAAAG,SAAOiL,QAEzEpL,EAAAA,EAAAA,KAAA,KAAAG,SAAIqL,GAAY,UAAY,iBAC5BxL,EAAAA,EAAAA,KAAA,UAAQ6C,UAAU,uBAAuBU,QAASkI,GAAMtL,SAAC,WACzDH,EAAAA,EAAAA,KAAA,UAAQ6C,UAAU,yBAAyBU,QAASmI,GAAMvL,SAAC,WAC3DH,EAAAA,EAAAA,KAAA,UAAQ6C,UAAU,sBAAsBU,QAASA,KAC/CoI,KACAD,IAAO,EACPvL,SAAC,eAGS,GAAfkJ,GAAmC,GAAfA,IAAoBrJ,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,cAAa1C,SAAC,2DACtEK,EAAAA,EAAAA,MAACqN,EAAAA,GAAY,CAAA1N,SAAA,EACXH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,YAAYgD,QAASA,IAAM2E,GAAkB,GAAO/H,SAAC,WAGpEH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,UAAUsE,KAAK,SAAQ1E,SAAE,6BAOhDK,EAAAA,EAAAA,MAACgM,EAAAA,GAAM,CACLC,SAAS,SACT/F,QAASyB,EACTuE,QAASA,IAAMtE,GAAiB,GAChC,kBAAgB,iBAAgBjI,SAAA,EAEhCH,EAAAA,EAAAA,KAAC2M,EAAAA,GAAY,CAAAxM,UACXH,EAAAA,EAAAA,KAAC4M,EAAAA,GAAW,CAACvK,GAAG,iBAAgBlC,SAAC,kBAEnCH,EAAAA,EAAAA,KAAC6M,EAAAA,GAAU,CAAA1M,UACTK,EAAAA,EAAAA,MAAA,QAAMsM,SAlTYlL,UAEtB,MAAM8M,EAASlE,EAAkBwC,QAAQC,MACnC0B,EAAalE,EAAmBuC,QAAQC,MACxCK,EAAS/E,QAGGzG,EAAAA,EACfI,KAAK,WACLqL,OAAO,CAAEmB,SAAQC,aAAYnB,QAASF,IACtCnL,OAAO,KACPG,SACH8F,GAAiB,GACjB7F,QAAQgM,IAAI,UACZ,MAAM,MAAEtM,SAAgBH,EAAAA,EAASI,KAAK,YAAY0M,OAAO,CACvDvM,GAAIiL,EACJoB,WAGF,GAAIzM,EACF,MAAMA,EAIRd,EAAS,cAAc,EA0RahB,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe4K,IAAKjD,EAAmBkD,YAAY,SAAS7I,KAAK,SAAS8I,UAAU,OAEvG3N,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAegC,KAAK,iBAAiB4I,IAAKhD,EAAoBiD,YAAY,uBAAuBC,UAAU,OAG9HnN,EAAAA,EAAAA,MAACqN,EAAAA,GAAY,CAAA1N,SAAA,EACXH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,YAAYgD,QAASA,IAAM6E,GAAiB,GAAOjI,SAAC,WAGnEH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,UAAUsE,KAAK,SAAQ1E,SAAE,2BAQhDK,EAAAA,EAAAA,MAACgM,EAAAA,GAAM,CACLC,SAAS,SACT/F,QAAS2B,EACTqE,QAASA,IAAMpE,GAAe,GAC9B,kBAAgB,eAAcnI,SAAA,EAE9BH,EAAAA,EAAAA,KAAC2M,EAAAA,GAAY,CAAAxM,UACXH,EAAAA,EAAAA,KAAC4M,EAAAA,GAAW,CAACvK,GAAG,eAAclC,SAAC,gBAEjCH,EAAAA,EAAAA,KAAC6M,EAAAA,GAAU,CAAA1M,UACTK,EAAAA,EAAAA,MAAA,QAAMsM,SAlOQlL,UACpB0M,EAAEO,iBAGF,MAAMF,EAAcxB,MAASC,OAAO,oBAC9BL,EAAQ7B,EAAe8B,QAAQC,MAC/BK,EAAS/E,EAETuG,QAAchN,EAAAA,EACjBI,KAAK,SACLqL,OAAO,CAAER,QAAOgC,eAAgB5F,EAAewF,aAAYnB,QAASF,IACpEnL,OAAO,KACPG,SAEHC,QAAQgM,IAAItF,GAEZ,IAAI,IAAI4B,EAAI,EAAGA,EAAI5B,EAAS6B,OAAQD,IACpC,CACE,MAAMmE,QAAkBlN,EAAAA,EACrBI,KAAK,cACLqL,OAAO,CAAE0B,QAASH,EAAMjN,KAAKQ,GAAI6M,QAASjG,EAAS4B,GAAGoC,MAAOO,QAASF,EAAQ6B,WAAYlG,EAAS4B,GAAGuE,MAAOT,WAAYA,IACzHxM,OAAO,KACPG,SACHC,QAAQgM,IAAIc,KAAKC,UAAUN,GAC7B,CAEA1G,GAAe,GACfnH,EAAS,SAAS,EAuMkBhB,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,OAAM1C,UACnBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe4K,IAAKvC,EAAgBwC,YAAY,aAAa7I,KAAK,OAAO8I,UAAU,OActG3N,EAAAA,EAAAA,KAACuP,EAAAA,GAAM,CACLC,aAAc,GACdC,SAAO,EACP5P,KAAK,SACL+K,QAAS7B,EACTlG,UAAU,qBACV6M,gBAAgB,SAChBC,SA1SoBC,IAC5BrN,QAAQgM,IAAIqB,GACZ,MAAMC,EAAc,IAAI5G,GAGxB,IAAK,IAAI4B,EAAI,EAAGA,EAAI+E,EAAgB9E,OAAQD,IAAK,CAC/C,IAAIiF,GAAW,EACf,IAAI,IAAIC,EAAI,EAAGA,EAAIF,EAAY/E,OAAQiF,IAElCF,EAAYE,GAAG9C,OAAS2C,EAAgB/E,GAAGoC,QAE5C6C,GAAW,GAGf,GAAGA,EAAS,CACV,MAAM/E,EAAM,CAAC,EACbA,EAAIkC,MAAQ2C,EAAgB/E,GAAGoC,MAC/BlC,EAAIiF,MAAQJ,EAAgB/E,GAAGmF,MAC/BjF,EAAIC,SAAW4E,EAAgB/E,GAAGG,SAClCD,EAAIkF,SAAWL,EAAgB/E,GAAGG,SAClCD,EAAIqE,MAAQ,EACZS,EAAY5E,KAAKF,GACjB,IAAImF,EAAQ/G,EAAgB4B,EAAIC,SAChC5B,EAAiB8G,EACnB,CAEF,CACAhH,EAAY2G,EAAY,IAmRjB5G,EAAS6B,OAAS,IACjBtK,EAAAA,EAAAA,MAAAoF,EAAAA,SAAA,CAAAzF,SAAA,CACG8I,EAAStI,KAAI,CAACqF,EAAMC,KAEnBzF,EAAAA,EAAAA,MAAA,OAAiBqC,UAAU,gBAAe1C,SAAA,EACxCK,EAAAA,EAAAA,MAAA,OAAKqC,UAAU,MAAK1C,SAAA,EAClBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe6K,YAAY,YAAY7I,KAAK,OAAOoI,MAAOjH,EAAKgK,MAAOG,UAAU,KACjGnQ,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe6K,YAAY,YAAY7I,KAAK,OAAOoI,MAAOjH,EAAKiH,MAAOmD,QAAM,QAE/FpQ,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,MAAK1C,UAClBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe6K,YAAY,aAAa7I,KAAK,SAASoI,MAAOjH,EAAKoJ,MAAOO,SAAWrB,GAvRjG+B,EAAC/B,EAAGrB,KAC1B,MAAM4C,EAAc,IAAI5G,GACxB,IAAIiH,EAAQ,EAEZ,IAAI,IAAIrF,EAAG,EAAIA,EAAIgF,EAAY/E,OAAQD,IAElCgF,EAAYhF,GAAGoC,OAASA,IACzB4C,EAAYhF,GAAGuE,MAAQd,EAAEgC,OAAOrD,MAChC4C,EAAYhF,GAAGG,SAAW6E,EAAYhF,GAAGoF,SAAWJ,EAAYhF,GAAGuE,OAErEc,GAASL,EAAYhF,GAAGG,SACxB5B,EAAiB8G,GAEnBhH,EAAY2G,EAAY,EA0QqGQ,CAAgB/B,EAAGtI,EAAKiH,YAErIjN,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,MAAK1C,UAClBH,EAAAA,EAAAA,KAAA,SAAO6C,UAAU,eAAe6K,YAAY,gBAAgB7I,KAAK,SAASoI,MAAOjH,EAAKgF,eAThF/E,MAgBZzF,EAAAA,EAAAA,MAAA,OAAAL,SAAA,CAAK,iBAAegJ,SAYxB3I,EAAAA,EAAAA,MAACqN,EAAAA,GAAY,CAAA1N,SAAA,EACXH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,YAAYgD,QAASA,IAAM+E,GAAe,GAAOnI,SAAC,WAGjEH,EAAAA,EAAAA,KAAC8N,EAAAA,GAAO,CAACvN,MAAM,UAAUsE,KAAK,SAAQ1E,SAAE,0BAM/C,ECtjBL,EAfsBoQ,KAElB/P,EAAAA,EAAAA,MAAA,OAAAL,SAAA,EACEH,EAAAA,EAAAA,KAACiH,EAAU,KACXjH,EAAAA,EAAAA,KAAC8H,EAAgB,KACjBtH,EAAAA,EAAAA,MAAA,OAAKqC,UAAU,iDAAgD1C,SAAA,EAC7DH,EAAAA,EAAAA,KAACmE,EAAS,KACVnE,EAAAA,EAAAA,KAAA,OAAK6C,UAAU,wBAAuB1C,UACpCH,EAAAA,EAAAA,KAACD,EAAU,W","sources":["routes.js","components/AppContent.js","components/header/AppHeaderDropdown.js","components/AppHeader.js","components/AppSidebarNav.js","_nav.js","components/AppSidebar.js","components/header/TaskPlusDropdown.js","layout/DefaultLayout.js"],"sourcesContent":["import React from 'react'\n\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'))\nconst Activities = React.lazy(() => import('./views/activities/Activities'))\nconst Goals = React.lazy(() => import('./views/goals/Goals'))\nconst Profile = React.lazy(() => import('./views/profiles/Profiles'))\nconst ProfileEdit = React.lazy(() => import('./views/profiles/ProfileEdit'))\nconst Foods = React.lazy(() => import('./views/food/Foods'))\nconst Meals = React.lazy(() => import('./views/meals/Meals'))\nconst Login = React.lazy(() => import('./views/auth/Login'))\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  { path: '/login', name: 'Login', element: Login },\n  { path: '/dashboard', name: 'Dashboard', element: Dashboard },\n  { path: '/activities', name: 'Activities', element: Activities },\n  { path: '/goals', name: 'Goals', element: Goals },\n  { path: '/foods', name: 'Foods', element: Foods },\n  { path: '/profile', name: 'Profile', element: Profile },\n  { path: '/profile/edit', name: 'ProfileEdit', element: ProfileEdit },\n  { path: '/meals', name: 'Meals', element: Meals}\n]\n\nexport default routes\n","import React, { Suspense } from 'react'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport { CContainer, CSpinner } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\n\nconst AppContent = () => {\n  return (\n    <CContainer lg>\n      <Suspense fallback={<CSpinner color=\"primary\" />}>\n        <Routes>\n          {routes.map((route, idx) => {\n            return (\n              route.element && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  element={<route.element />}\n                />\n              )\n            )\n          })}\n          <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\n        </Routes>\n      </Suspense>\n    </CContainer>\n  )\n}\n\nexport default React.memo(AppContent)\n","import React, {useState, useEffect} from 'react'\nimport { useNavigate } from 'react-router-dom';\nimport {CAvatar,CDropdown,CDropdownDivider,CDropdownHeader,CDropdownItem,CDropdownMenu,CDropdownToggle,} from '@coreui/react'\nimport {cilLockLocked,cilSettings,cilUser,} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport avatar9 from './../../assets/images/avatars/9.jpg'\nimport no_pic from '../../assets/images/avatars/no_pic.png';\nimport { supabase } from '../../helper/supabaseClient';\n\nconst AppHeaderDropdown = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState([])\n  \n  const logout = async () => {\n      setUser(null);\n      localStorage.removeItem('supabaseSession');\n      await supabase.auth.signOut();\n  };\n\n  useEffect(() => {\n    fetchProfile()\n  }, [])\n\n  const fetchProfile = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      const { data, error } = await supabase.from('profiles').select('*').eq('id', user.id).single()\n\n      if (error) {\n        throw error\n      }\n\n      setProfile(data || [])\n    } catch (error) {\n      console.error('Error fetching profile:', error.message)\n    }\n  }\n  \n  const goToProfile = () => {\n      navigate('/profile');\n  };\n  \n  return (\n    <CDropdown variant=\"nav-item\">\n      <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n        <CAvatar src={profile.avatar_url || no_pic} size=\"md\" />\n      </CDropdownToggle>\n      <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Settings</CDropdownHeader>\n        <CDropdownItem onClick={goToProfile}>\n          <CIcon icon={cilUser} className=\"me-2\" />\n          Profile\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n        </CDropdownItem>\n        <CDropdownDivider />\n        <CDropdownItem onClick={logout}>\n          <CIcon icon={cilLockLocked} className=\"me-2\" />\n          Logout\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  )\n}\n\nexport default AppHeaderDropdown\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilPlus, cilAccountLogout, cilList, cilMenu } from '@coreui/icons'\nimport { HashRouter, Route, Routes, useNavigate } from 'react-router-dom'\n\n\nimport { AppBreadcrumb } from './index'\nimport { AppHeaderDropdown } from './header/index'\nimport logo from '../assets/images/logo.png';\n\nconst AppHeader = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch()\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n  \n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatch({ type: 'set', sidebarShow: !sidebarShow })}\n        >\n          <CIcon icon={cilMenu} size=\"lg\" />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          {/* <img src={logo} alt=\"Logo\" className=\"logo sidebar-brand-narrow\" height={50} /> */}\n        </CHeaderBrand>\n        <CHeaderNav className=\"d-none d-md-flex me-auto\">\n          <CNavItem>\n            <CNavLink to=\"/dashboard\" component={NavLink}>\n              Dashboard\n            </CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown />\n        </CHeaderNav>\n      </CContainer>\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n","import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { CBadge } from '@coreui/react'\n\nexport const AppSidebarNav = ({ items }) => {\n  const location = useLocation()\n  const navLink = (name, icon, badge) => {\n    return (\n      <>\n        {icon && icon}\n        {name && name}\n        {badge && (\n          <CBadge color={badge.color} className=\"ms-auto\">\n            {badge.text}\n          </CBadge>\n        )}\n      </>\n    )\n  }\n\n  const navItem = (item, index) => {\n    const { component, name, badge, icon, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        {...(rest.to &&\n          !rest.items && {\n            component: NavLink,\n          })}\n        key={index}\n        {...rest}\n      >\n        {navLink(name, icon, badge)}\n      </Component>\n    )\n  }\n  const navGroup = (item, index) => {\n    const { component, name, icon, to, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        idx={String(index)}\n        key={index}\n        toggler={navLink(name, icon)}\n        visible={location.pathname.startsWith(to)}\n        {...rest}\n      >\n        {item.items?.map((item, index) =>\n          item.items ? navGroup(item, index) : navItem(item, index),\n        )}\n      </Component>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {items &&\n        items.map((item, index) => (item.items ? navGroup(item, index) : navItem(item, index)))}\n    </React.Fragment>\n  )\n}\n\nAppSidebarNav.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n","import React from 'react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilPuzzle,\n  cilSpeedometer,\n  cilFastfood\n} from '@coreui/icons'\nimport { CNavGroup, CNavItem, CNavTitle } from '@coreui/react'\n\nconst _nav = [\n  {\n    component: CNavItem,\n    name: 'Dashboard',\n    to: '/dashboard',\n    icon: <CIcon icon={cilSpeedometer} customClassName=\"nav-icon\" />,\n  },\n  {\n    component: CNavItem,\n    name: 'Activities',\n    to: '/activities',\n    icon: <CIcon icon={cilPuzzle} customClassName=\"nav-icon\" />,\n  },\n  {\n    component: CNavItem,\n    name: 'Goals',\n    to: '/goals',\n    icon: <CIcon icon={cilPuzzle} customClassName=\"nav-icon\" />,\n  },\n  {\n    component: CNavItem,\n    name: 'Foods',\n    to: '/foods',\n    icon: <CIcon icon={cilFastfood} customClassName=\"nav-icon\" />,\n  },\n\n  {\n    component: CNavItem,\n    name: 'Meals',\n    to: '/meals',\n    icon: <CIcon icon={cilFastfood} customClassName=\"nav-icon\" />,\n  },\n]\n\nexport default _nav\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler } from '@coreui/react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\nimport logo from '../assets/images/logo.png';\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = () => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      unfoldable={unfoldable}\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: 'set', sidebarShow: visible })\n      }}\n    >\n      <CSidebarBrand className=\"d-none d-md-flex\" to=\"/\">\n        <img src={logo} alt=\"Logo\" className=\"logo sidebar-brand-full\" height={50} />\n        <img src={logo} alt=\"Logo\" className=\"logo sidebar-brand-narrow\" height={50} />\n      </CSidebarBrand>\n      <CSidebarNav>\n        <SimpleBar>\n          <AppSidebarNav items={navigation} />\n        </SimpleBar>\n      </CSidebarNav>\n      <CSidebarToggler\n        className=\"d-none d-lg-flex\"\n        onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n      />\n    </CSidebar>\n  )\n}\n\nexport default React.memo(AppSidebar)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { supabase } from '../../helper/supabaseClient';\nimport { json, useNavigate } from 'react-router-dom';\nimport Select from 'react-select'\nimport makeAnimated from 'react-select/animated';\nimport {\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CFormSelect,\n} from '@coreui/react'\nimport {\n  cilSettings,\n  cilUser,\n} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { cilPlus } from '@coreui/icons'\nimport { CButton, CModal, CModalBody, CModalHeader, CModalTitle, CModalFooter } from '@coreui/react'\nimport moment from 'moment';\nimport { useStopwatch } from 'react-timer-hook';\n\nconst TaskPlusDropdown = () => {\n  const [visibleGoal, setVisibleGoal] = useState(false)\n  const [visibleAcivity, setVisibleAcivity] = useState(false)\n  const [visibleWeight, setVisibleWeight] = useState(false)\n  const [visibleMeal, setVisibleMeal] = useState(false)\n  const [userId, setUserId] = useState(null);\n  const [activities, setActivities] = useState([]);\n  const [goalTypes, setGoalTypes] = useState([]);\n  const [foods, setFoods] = useState([])\n  const [foodOptions, setFoodOptions] = useState([])\n  // const [selectedItems, setSelectedItems] = useState([]);\n  const [mealInfo, setMealInfo] = useState([]);\n  const [totalCalories, setTotalColories] = useState(0);\n  const [isTimerUsed, setIsTimerUsed] = useState(1);\n\n  useEffect(() => {\n    fetchUserId();\n    fetchActivities();\n    fetchGoalTypes();\n    fetchFoods()\n  }, []);\n\n\n\n  const navigate = useNavigate();\n\n  const fetchUserId = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUserId(user.id);\n    } catch (error) {\n      console.error('Error fetching user ID:', error.message);\n    }\n  };\n\n  // goal start\n  const fetchGoalTypes = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('goal_types')\n        .select('id, name')\n        .eq('status', 1);\n\n      if (error) {\n        throw error;\n      }\n\n      const formattedGoalTypes = data.map(goal => ({\n        id: goal.name,\n        name: goal.name.charAt(0).toUpperCase() + goal.name.slice(1)\n      }));\n      setGoalTypes(formattedGoalTypes || []);\n    } catch (error) {\n      console.error('Error fetching goals:', error.message);\n    }\n  };\n\n  const inputTitle = useRef();\n  const inputType = useRef();\n  const inputStartAt = useRef();\n  const inputGoalAmount = useRef();\n\n  const handleCreateGoal = async () => {\n    const title = inputTitle.current.value;\n    const type = inputType.current.value;\n    const start_at = moment().format('YYYY-MM-DD HH:mm');\n    const goal_amount = inputGoalAmount.current.value;\n    const userid = userId;\n\n    const res = await supabase\n      .from(\"goals\")\n      .insert({ title, type, start_at, goal_amount, user_id: userid })\n      .select(\"*\")\n      .single();\n\n    setVisibleGoal(false)\n\n    navigate('/goals');\n  };\n  // goal end\n\n  // activity start\n  const fetchActivities = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('activities')\n        .select('id, name')\n        .eq('status', 1);\n\n      if (error) {\n        throw error;\n      }\n\n      const formattedActivities = data.map(activity => ({\n        id: activity.id,\n        name: activity.name.charAt(0).toUpperCase() + activity.name.slice(1)\n      }));\n      setActivities(formattedActivities || []);\n    } catch (error) {\n      console.error('Error fetching activities:', error.message);\n    }\n  };\n\n  const inputActivityId = useRef();\n  const inputActivityTitle = useRef();\n  // const inputActivityAmount = useRef();\n  // const inputActivityStartAt = useRef();\n  // const inputActivityDistance = useRef();\n  // const inputActivityEnergy = useRef();\n\n\n\n  const handleCreateAcivity = async () => {\n    try{\n      if(totalSeconds == undefined || totalSeconds == 0){\n        setIsTimerUsed(2);\n        return;\n      }\n      setIsTimerUsed(3);\n\n      const title = inputActivityTitle.current.value;\n      const activity_id = inputActivityId.current.value;\n      // const activity_amount = inputActivityAmount.current.value;\n      // const start_at = inputActivityStartAt.current.value;\n      const userid = userId;\n      // const distance = inputActivityDistance.current.value;\n      // const energy = inputActivityEnergy.current.value;\n\n      const endTimestamp = moment();\n      const startTimestamp = endTimestamp.clone().subtract(totalSeconds, 'seconds');\n\n      const res = await supabase\n        .from(\"activity_records\")\n        .insert({\n          title,\n          activity_id,\n          start_at: startTimestamp.format('YYYY-MM-DD HH:mm:ss'),\n          end_at: endTimestamp.format('YYYY-MM-DD HH:mm:ss'),\n          user_id: userid })\n        .select(\"*\")\n        .single();\n\n      setVisibleAcivity(false)\n\n      navigate('/activities');\n\n    }catch(e){\n      console.log(e)\n    }\n  };\n  // activity end\n\n  // add weight start\n\n  const inputWeightAmount = useRef();\n  const inputWeightStartAt = useRef();\n\n  const handleAddWeight = async () => {\n\n    const weight = inputWeightAmount.current.value;\n    const created_at = inputWeightStartAt.current.value;\n    const userid = userId;\n\n\n    const res = await supabase\n      .from(\"weights\")\n      .insert({ weight, created_at, user_id: userid })\n      .select(\"*\")\n      .single();\n    setVisibleWeight(false)\n    console.log('lovely');\n    const { error } = await supabase.from('profiles').upsert({\n      id: userid,\n      weight,\n    })\n\n    if (error) {\n      throw error\n    }\n\n\n    navigate('/activities');\n  };\n\n  const fetchFoods = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('foods')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        throw error\n      }\n\n      const options = []\n      for (let i = 0; i < data.length; i++) {\n\n        let obj = {};\n        obj['value'] = data[i].id;\n        obj['label'] = data[i].name;\n        obj['calories'] = data[i].calories;\n        options.push(obj);\n      }\n\n      setFoodOptions(options)\n      // Set Foods data in state\n      setFoods(data || [])\n    } catch (error) {\n      console.error('Error fetching Foods:', error.message)\n    }\n  }\n\n  // add meals\n  const handleMealInfoChange = (selectedOptions) => {\n    console.log(selectedOptions)\n    const newMealInfo = [...mealInfo];\n\n\n    for (let i = 0; i < selectedOptions.length; i++) {\n      let notFound = true;\n      for(let j = 0; j < newMealInfo.length; j++)\n      {\n        if(newMealInfo[j].value == selectedOptions[i].value)\n        {\n          notFound = false;\n        }\n      }\n      if(notFound){\n        const obj = {}\n        obj.value = selectedOptions[i].value;\n        obj.label = selectedOptions[i].label;\n        obj.calories = selectedOptions[i].calories;\n        obj.baseUnit = selectedOptions[i].calories;\n        obj.count = 1;\n        newMealInfo.push(obj)\n        let total = totalCalories + obj.calories\n        setTotalColories(total)\n      }\n\n    }\n    setMealInfo(newMealInfo);\n  }\n\n\nconst inputMealTitle = useRef();\nconst inputMealCreatedAt = useRef();\nconst handleFoodCount = (e, value) => {\n  const newMealInfo = [...mealInfo];\n  let total = 0;\n\n  for(let i =0 ; i < newMealInfo.length; i++)\n  {\n    if(newMealInfo[i].value == value){\n      newMealInfo[i].count = e.target.value;\n      newMealInfo[i].calories = newMealInfo[i].baseUnit * newMealInfo[i].count;\n    }\n    total += newMealInfo[i].calories;\n    setTotalColories(total);\n  }\n  setMealInfo(newMealInfo);\n}\n\nconst handleAddMeal = async (e) => {\n  e.preventDefault();\n\n\n  const created_at =  moment().format('YYYY-MM-DD HH:mm');\n  const title = inputMealTitle.current.value;\n  const userid = userId;\n\n  const meals = await supabase\n    .from(\"meals\")\n    .insert({ title, total_calories: totalCalories, created_at, user_id: userid })\n    .select(\"*\")\n    .single();\n\n  console.log(mealInfo);\n\n  for(let i = 0; i < mealInfo.length; i++)\n  {\n    const mealFoods = await supabase\n      .from(\"meal_foods\")\n      .insert({ meal_id: meals.data.id, food_id: mealInfo[i].value, user_id: userid, food_count: mealInfo[i].count, created_at: created_at, })\n      .select(\"*\")\n      .single();\n    console.log(JSON.stringify(mealFoods))\n  }\n\n  setVisibleMeal(false)\n  navigate('/meals');\n};\n\n// end add meals\n\nconst {\n  totalSeconds,\n  seconds,\n  minutes,\n  hours,\n  days,\n  isRunning,\n  start,\n  pause,\n  reset,\n} = useStopwatch({ autoStart: false });\n\nreturn (\n  <>\n    <div style={{ position: 'fixed', bottom: '50px', right: '50px', zIndex: 9999 }}>\n      <CDropdown variant=\"nav-item no-caret\">\n        <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n          <div\n            style={{\n              width: '20px',\n              height: '40px',\n              borderRadius: '50%',\n              // backgroundColor: 'green',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <CIcon icon={cilPlus} size=\"xl\" style={{ color: 'white' }} />\n          </div>\n        </CDropdownToggle>\n        <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n          <CDropdownItem onClick={() => setVisibleMeal(!visibleMeal)}>\n            <CIcon icon={cilUser} className=\"me-2\" />\n            Add Meal\n          </CDropdownItem>\n          <CDropdownItem onClick={() => setVisibleGoal(!visibleGoal)}>\n            <CIcon icon={cilSettings} className=\"me-2\" />\n            Add Goal\n          </CDropdownItem>\n          <CDropdownItem onClick={() => setVisibleWeight(!visibleWeight)}>\n            <CIcon icon={cilSettings} className=\"me-2\" />\n            Record Weight\n          </CDropdownItem>\n          <CDropdownItem onClick={() => setVisibleAcivity(!visibleAcivity)}>\n            <CIcon icon={cilSettings} className=\"me-2\" />\n            Add Activity\n          </CDropdownItem>\n        </CDropdownMenu>\n      </CDropdown>\n    </div>\n\n    {/* goal modal */}\n    <CModal\n      backdrop=\"static\"\n      visible={visibleGoal}\n      onClose={() => setVisibleGoal(false)}\n      aria-labelledby=\"AddGoalModal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"AddGoalModal\">Add Goal</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <form onSubmit={handleCreateGoal}>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputTitle} placeholder=\"Title\" required={true} type='text' />\n          </div>\n          <div className=\"mb-3\">\n            <select className=\"form-control\" ref={inputType}>\n              {goalTypes.map(goalType => (\n                <option key={goalType.id} value={goalType.id}>\n                  {goalType.name}\n                </option>\n              ))}\n            </select>\n          </div>\n     \n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputGoalAmount} placeholder=\"Duration\" type=\"number\" required={true} />\n          </div>\n          <CModalFooter>\n            <CButton color=\"secondary\" onClick={() => setVisibleGoal(false)}>\n              Close\n            </CButton>\n            <CButton color=\"primary\" type='submit'>Add Goal</CButton>\n          </CModalFooter>\n        </form>\n      </CModalBody>\n\n    </CModal>\n\n    {/* activity modal */}\n    <CModal\n      backdrop=\"static\"\n      visible={visibleAcivity}\n      onClose={() => setVisibleAcivity(false)}\n      aria-labelledby=\"AddActivityModal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"AddActivityModal\">Add Activity</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <form onSubmit={handleCreateAcivity}>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputActivityTitle} placeholder=\"Title\" type='text' required={true} />\n          </div>\n          <div className=\"mb-3\">\n            <select className=\"form-control\" ref={inputActivityId}>\n              {activities.map(activity => (\n                <option key={activity.id} value={activity.id}>\n                  {activity.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          {/* <div className=\"mb-3\">\n            <input className=\"form-control\" type=\"datetime-local\" ref={inputActivityStartAt} name=\"time\" placeholder=\"Ex: 2024-02-06 13:15\" required={true} hidden={true}/>\n          </div>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputActivityAmount} placeholder=\"Duration\" name=\"duration\" type='number' required={true} hidden={true} />\n          </div>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputActivityDistance} placeholder=\"Distance\" name=\"distance\" type='number' required={true} hidden={true} />\n          </div>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputActivityEnergy} placeholder=\"Energy\" name=\"energy\" type='number' required={true} hidden={true}/>\n          </div> */}\n\n          <div className=\"mb-3\">\n            <div style={{textAlign: 'center'}}>\n              <div style={{fontSize: '100px'}}>\n                <span>{days}</span>:<span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>\n              </div>\n              <p>{isRunning ? 'Running' : 'Not running'}</p>\n              <button className='btn btn-primary mx-2' onClick={start}>Start</button>\n              <button className='btn btn-secondary mx-2' onClick={pause}>Pause</button>\n              <button className='btn btn-danger mx-2' onClick={() => {\n                reset();\n                pause();\n              }}>Reset</button>\n            </div>\n          </div>\n          {isTimerUsed == 2 || isTimerUsed != 0 && <div className='text-danger'>*You didn't run timer or time is less than 60 seconds</div>}\n          <CModalFooter>\n            <CButton color=\"secondary\" onClick={() => setVisibleAcivity(false)}>\n              Close\n            </CButton>\n            <CButton color=\"primary\" type=\"submit\" >Add Activity</CButton>\n          </CModalFooter>\n        </form>\n      </CModalBody>\n\n    </CModal>\n    {/* add weight modal */}\n    <CModal\n      backdrop=\"static\"\n      visible={visibleWeight}\n      onClose={() => setVisibleWeight(false)}\n      aria-labelledby=\"AddWeightModal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"AddWeightModal\">Add Weight</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <form onSubmit={handleAddWeight}>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputWeightAmount} placeholder=\"Weight\" type='number' required={true} />\n          </div>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" type=\"datetime-local\" ref={inputWeightStartAt} placeholder=\"Ex: 2024-02-06 13:15\" required={true} />\n          </div>\n\n          <CModalFooter>\n            <CButton color=\"secondary\" onClick={() => setVisibleWeight(false)}>\n              Close\n            </CButton>\n            <CButton color=\"primary\" type=\"submit\" >Add Weight</CButton>\n          </CModalFooter>\n        </form>\n      </CModalBody>\n\n    </CModal>\n\n    {/* add meal modal */}\n    <CModal\n      backdrop=\"static\"\n      visible={visibleMeal}\n      onClose={() => setVisibleMeal(false)}\n      aria-labelledby=\"AddMealModal\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"AddMealModal\">Add Meal</CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <form onSubmit={handleAddMeal}>\n          <div className=\"mb-3\">\n            <input className=\"form-control\" ref={inputMealTitle} placeholder=\"Meal Title\" type='text' required={true} />\n          </div>\n          {/* <div className=\"mb-3\">\n              <select className=\"form-control\" multiple onChange={handleFoodChange} required={true}>\n                {foods.map(food => (\n                  <option key={food.id} value={food.id}>\n                    {food.name}\n                  </option>\n                ))}\n              </select>\n            </div> */}\n\n          {/* <Select options={options} /> */}\n\n          <Select\n            defaultValue={[]}\n            isMulti\n            name=\"colors\"\n            options={foodOptions}\n            className=\"basic-multi-select\"\n            classNamePrefix=\"select\"\n            onChange={handleMealInfoChange}\n          />\n\n\n          {mealInfo.length > 0 && (\n            <>\n              {mealInfo.map((item, index) => (\n\n                <div key={index} className=\"mb-3 mt-3 row\">\n                  <div className=\"col\">\n                    <input className=\"form-control\" placeholder=\"Food Name\" type='text' value={item.label} readOnly={true} />\n                    <input className=\"form-control\" placeholder=\"Food Name\" type='text' value={item.value} hidden />\n                  </div>\n                  <div className=\"col\">\n                    <input className=\"form-control\" placeholder=\"Food Count\" type='number' value={item.count} onChange={(e) => handleFoodCount(e, item.value)} />\n                  </div>\n                  <div className=\"col\">\n                    <input className=\"form-control\" placeholder=\"Calorie Count\" type='number' value={item.calories} />\n                  </div>\n                </div>\n\n\n\n              ))}\n              <div>Total Calorie {totalCalories}</div>\n            </>\n          )}\n\n\n\n\n\n          {/* <div className=\"mb-3\">\n              <input className=\"form-control\" type=\"datetime-local\" ref={inputMealCreatedAt} placeholder=\"Ex: 2024-02-06 13:15\" required={true} />\n            </div> */}\n\n          <CModalFooter>\n            <CButton color=\"secondary\" onClick={() => setVisibleMeal(false)}>\n              Close\n            </CButton>\n            <CButton color=\"primary\" type=\"submit\" >Add Meal</CButton>\n          </CModalFooter>\n        </form>\n      </CModalBody>\n\n    </CModal>\n  </>\n)\n}\n\nexport default TaskPlusDropdown\n","import React from 'react'\nimport { AppContent, AppSidebar, AppHeader, TaskPlusDropdown } from '../components/index'\n\nconst DefaultLayout = () => {\n  return (\n    <div>\n      <AppSidebar />\n      <TaskPlusDropdown />\n      <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n        <AppHeader />\n        <div className=\"body flex-grow-1 px-3\">\n          <AppContent />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DefaultLayout\n"],"names":["Dashboard","React","Activities","Goals","Profile","ProfileEdit","Foods","Meals","path","exact","name","element","AppContent","_jsx","CContainer","lg","children","Suspense","fallback","CSpinner","color","_jsxs","Routes","routes","map","route","idx","Route","Navigate","to","replace","AppHeaderDropdown","navigate","useNavigate","user","setUser","useState","profile","setProfile","useEffect","fetchProfile","async","data","supabase","auth","getUser","error","from","select","eq","id","single","console","message","CDropdown","variant","CDropdownToggle","placement","className","caret","CAvatar","src","avatar_url","no_pic","size","CDropdownMenu","CDropdownHeader","CDropdownItem","onClick","goToProfile","CIcon","icon","cilUser","href","cilSettings","CDropdownDivider","localStorage","removeItem","signOut","cilLockLocked","AppHeader","dispatch","useDispatch","sidebarShow","useSelector","state","CHeader","position","fluid","CHeaderToggler","type","cilMenu","CHeaderBrand","CHeaderNav","CNavItem","CNavLink","component","NavLink","AppSidebarNav","_ref","items","location","useLocation","navLink","badge","_Fragment","CBadge","text","navItem","item","index","rest","Component","_createElement","key","navGroup","_item$items","String","toggler","visible","pathname","startsWith","cilSpeedometer","customClassName","cilPuzzle","cilFastfood","AppSidebar","unfoldable","sidebarUnfoldable","CSidebar","onVisibleChange","CSidebarBrand","logo","alt","height","CSidebarNav","SimpleBar","navigation","CSidebarToggler","TaskPlusDropdown","visibleGoal","setVisibleGoal","visibleAcivity","setVisibleAcivity","visibleWeight","setVisibleWeight","visibleMeal","setVisibleMeal","userId","setUserId","activities","setActivities","goalTypes","setGoalTypes","foods","setFoods","foodOptions","setFoodOptions","mealInfo","setMealInfo","totalCalories","setTotalColories","isTimerUsed","setIsTimerUsed","fetchUserId","fetchActivities","fetchGoalTypes","fetchFoods","formattedGoalTypes","goal","charAt","toUpperCase","slice","inputTitle","useRef","inputType","inputGoalAmount","formattedActivities","activity","inputActivityId","inputActivityTitle","inputWeightAmount","inputWeightStartAt","order","ascending","options","i","length","obj","calories","push","inputMealTitle","totalSeconds","seconds","minutes","hours","days","isRunning","start","pause","reset","useStopwatch","autoStart","style","bottom","right","zIndex","width","borderRadius","display","alignItems","justifyContent","cilPlus","CModal","backdrop","onClose","CModalHeader","CModalTitle","CModalBody","onSubmit","title","current","value","start_at","moment","format","goal_amount","userid","insert","user_id","ref","placeholder","required","goalType","CModalFooter","CButton","undefined","activity_id","endTimestamp","startTimestamp","clone","subtract","end_at","e","log","textAlign","fontSize","weight","created_at","upsert","preventDefault","meals","total_calories","mealFoods","meal_id","food_id","food_count","count","JSON","stringify","Select","defaultValue","isMulti","classNamePrefix","onChange","selectedOptions","newMealInfo","notFound","j","label","baseUnit","total","readOnly","hidden","handleFoodCount","target","DefaultLayout"],"sourceRoot":""}