{"version":3,"file":"static/js/860.8d5f47a6.chunk.js","mappings":"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","sources":["views/meals/Meals.js"],"sourcesContent":["import React, { useEffect, useState, createRef } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CNav,\n  CTabPane,\n} from '@coreui/react'\n\nimport { supabase } from '../../helper/supabaseClient'\n\n\nconst Meals = () => {\n\n  const [activeKey, setActiveKey] = useState(1)\n  const [meals, setMeals] = useState([])\n  const [foods, setFoods] = useState([])\n\n\n  useEffect(() => {\n    fetchMeals()\n  }, [])\n\n  const fetchFoods = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('foods')\n        .select('*')\n        .order('created_at', { ascending: false })\n\n      if (error) {\n        throw error\n      }\n      return data;\n      // setFoods(data || [])\n    } catch (error) {\n      console.error('Error fetching Foods:', error.message)\n    }\n  }\n\n  const fetchFoodsForMeal = async (mealId) => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      const { data, error } = await supabase\n        .from('meal_foods')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n        .eq('meal_id', mealId)\n\n      if (error) {\n        throw error\n      }\n      return data\n    } catch (error) {\n      console.error('Error fetching all foods for meal:', error.message)\n    }\n  }\n\n  const fetchMeals = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n\n      const { data, error } = await supabase\n        .from('meals')\n        .select(`'*'`)\n        .order('created_at', { ascending: false })\n     \n      \n      console.log(data);\n      if (error) {\n        throw error\n      }\n\n      const mealFoods = {};\n\n      for (let i = 0; i < data.length; i++) {\n        const response = await fetchFoodsForMeal(data[i].id);\n        \n        for (let j = 0; j < response.length; j++) {\n          let meal_id = response[j].meal_id;\n\n          if (mealFoods[meal_id] != undefined) {\n            mealFoods[meal_id].push(response[j].food_id);\n          } else {\n            mealFoods[meal_id] = [];\n            mealFoods[meal_id].push(response[j].food_id);\n          }\n        }\n      }\n      const foods = await fetchFoods();\n      \n     \n      let finalData = [];\n      data.forEach(element => {\n        const selectedFoodList = [];\n\n        let foodIds = mealFoods[element.id];\n        if(foodIds == undefined) {\n          foodIds = [];\n        }\n       \n        for(let i = 0; i < foodIds.length; i++)\n        {\n          foods.forEach(food => {\n            if(food.id == foodIds[i])\n            {\n              selectedFoodList.push(food.name);\n            }\n          });\n        }\n\n        element.foodList = selectedFoodList;\n        \n      })\n     \n      // Set Meals data in state\n      setMeals(data || [])\n    } catch (error) {\n      console.error('Error fetching Meals:', error.message)\n    }\n  }\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Meals</CCardHeader>\n        <CCardBody>\n          <CNav variant=\"pills\" role=\"tablist\">\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 1}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"all-tab-pane\"\n                aria-selected={activeKey === 1}\n                onClick={() => setActiveKey(1)}\n              >\n                All\n              </CNavLink>\n            </CNavItem>\n          </CNav>\n          <CTabContent>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"all-tab-pane\" visible={activeKey === 1}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Meal Items</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Total Calories</CTableHeaderCell>\n\n\n                    <CTableHeaderCell scope=\"col\">Created At</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {meals.map((meal) => (\n                    <CTableRow key={meal.id}>\n                      <CTableDataCell>{meal.title}</CTableDataCell>\n                      <CTableDataCell>{meal.foodList.join(', ')}</CTableDataCell>\n                      <CTableDataCell>{meal.total_calories}</CTableDataCell>\n\n                      <CTableDataCell>{meal.created_at}</CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n          </CTabContent>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\nexport default Meals\n"],"names":["Meals","activeKey","setActiveKey","useState","meals","setMeals","foods","setFoods","useEffect","fetchMeals","fetchFoodsForMeal","async","data","user","supabase","auth","getUser","error","from","select","order","ascending","eq","id","mealId","console","message","log","mealFoods","i","length","response","j","meal_id","undefined","push","food_id","fetchFoods","forEach","element","selectedFoodList","foodIds","food","name","foodList","_jsx","_Fragment","children","_jsxs","CCard","className","CCardHeader","CCardBody","CNav","variant","role","CNavItem","CNavLink","active","component","onClick","CTabContent","CTabPane","visible","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","meal","CTableDataCell","title","join","total_calories","created_at"],"sourceRoot":""}