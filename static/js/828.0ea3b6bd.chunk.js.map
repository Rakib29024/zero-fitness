{"version":3,"file":"static/js/828.0ea3b6bd.chunk.js","mappings":"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","sources":["views/widgets/WidgetsDropdown.js","components/chart/StepBarChart.js","components/chart/HeightPieChart.js","components/chart/TotalMealFoodPieChart.js","components/chart/WeightPieChart.js","components/notification/DailyQuoteNofication.js","views/dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport CIcon from '@coreui/icons-react'\nimport { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons'\nimport { supabase } from '../../helper/supabaseClient'\n\nconst WidgetsDropdown = () => {\n  const [profile, setProfile] = useState([])\n\n  useEffect(() => {\n    fetchProfile()\n    console.log(profile)\n  }, [])\n\n  const fetchProfile = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      const { data, error } = await supabase.from('profiles').select('*').eq('id', user.id).single()\n\n      if (error) {\n        throw error\n      }\n\n      setProfile(data || [])\n    } catch (error) {\n      console.error('Error fetching profile:', error.message)\n    }\n  }\n\n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              { profile ? profile.weight : 0 }{'kg '}\n              <span className=\"fs-6 fw-normal\">\n                (-12.4% <CIcon icon={cilArrowBottom} />)\n              </span>\n            </>\n          }\n          title=\"Weight\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-primary'),\n                    data: [65, 59, 84, 84, 51, 55, 40],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: 30,\n                    max: 89,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"info\"\n          value={\n            <>\n              { profile ?\n                profile.gender == \"Male\" \n                ? Math.round(66 + (13.7 * profile.weight) + (5 * profile.height) - (6.8 *profile.age), 2)\n                : Math.round(655 + (9.6 * profile.weight) + (1.8 * profile.height) - (4.7 * profile.age), 2)\n              : 0 } {' '}\n              <span className=\"fs-6 fw-normal\">\n                (40.9% <CIcon icon={cilArrowTop} />)\n              </span>\n            </>\n          }\n          title=\"Daily Caloric Demand\"\n          \n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-info'),\n                    data: [1, 18, 9, 17, 34, 22, 11],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -9,\n                    max: 39,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n{/*       \n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"warning\"\n          value={\n            <>\n              2.49{' '}\n              <span className=\"fs-6 fw-normal\">\n                (84.7% <CIcon icon={cilArrowTop} />)\n              </span>\n            </>\n          }\n          title=\"Conversion Rate\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartLine\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40],\n                    fill: true,\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 2,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"danger\"\n          value={\n            <>\n              44K{' '}\n              <span className=\"fs-6 fw-normal\">\n                (-23.6% <CIcon icon={cilArrowBottom} />)\n              </span>\n            </>\n          }\n          title=\"Sessions\"\n          action={\n            <CDropdown alignment=\"end\">\n              <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n              </CDropdownToggle>\n              <CDropdownMenu>\n                <CDropdownItem>Action</CDropdownItem>\n                <CDropdownItem>Another action</CDropdownItem>\n                <CDropdownItem>Something else here...</CDropdownItem>\n                <CDropdownItem disabled>Disabled action</CDropdownItem>\n              </CDropdownMenu>\n            </CDropdown>\n          }\n          chart={\n            <CChartBar\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: [\n                  'January',\n                  'February',\n                  'March',\n                  'April',\n                  'May',\n                  'June',\n                  'July',\n                  'August',\n                  'September',\n                  'October',\n                  'November',\n                  'December',\n                  'January',\n                  'February',\n                  'March',\n                  'April',\n                ],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n                    barPercentage: 0.6,\n                  },\n                ],\n              }}\n              options={{\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                      drawTicks: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n     */}\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n","import { CChart } from \"@coreui/react-chartjs\"\nimport './chart.css'\n\nconst StepBarChart = ({data}) => {\n    \n    const getDayName = (dateString) => {\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const date = new Date(dateString);\n        const dayIndex = date.getDay();\n        return days[dayIndex];\n    };\n      \n    const [labels, steps] = data.reduce((acc, { date, step_count }) => {\n        acc[0].push(getDayName(date));\n        acc[1].push(step_count);\n        return acc;\n    }, [[], []]);\n\n    return (\n        <div className=\"chart-container\">\n            <h4 className=\"text-center\">Walking Statistics for 7 Days</h4>\n            <CChart\n                type=\"bar\"\n                data={{\n                    labels: labels,\n                    datasets: [\n                    {\n                        label: 'Steps',\n                        backgroundColor: '#002760', // Blue color with transparency\n                        borderColor: 'rgba(1, 1, 1, 1)', // Solid blue color for borders\n                        borderWidth: 1, // Border width\n                        data: steps,\n                    },\n                    ],\n                }}\n                options={{\n                    plugins: {\n                    legend: {\n                        display: true,\n                        labels: {\n                        color: '#333', // Label color\n                        font: {\n                            size: 14, // Label font size\n                            family: 'Arial', // Label font family\n                        },\n                        },\n                    },\n                    },\n                    scales: {\n                    x: {\n                        grid: {\n                        display: true,\n                        color: '#ddd', // X-axis grid color\n                        },\n                        ticks: {\n                        color: '#333', // X-axis tick color\n                        font: {\n                            size: 12, // X-axis tick font size\n                            family: 'Arial', // X-axis tick font family\n                        },\n                        },\n                    },\n                    y: {\n                        grid: {\n                        display: true,\n                        color: '#ddd', // Y-axis grid color\n                        },\n                        ticks: {\n                        color: '#333', // Y-axis tick color\n                        font: {\n                            size: 12, // Y-axis tick font size\n                            family: 'Arial', // Y-axis tick font family\n                        },\n                        },\n                    },\n                    },\n                }}\n            />\n        </div>\n    )\n}\n\nexport default StepBarChart;","import { CChart } from \"@coreui/react-chartjs\"\nimport './chart.css'\n\nconst HeightPieChart = ({data, height = 0}) => {\n    const initialHeight = height;\n    let averageHeight = height;\n    const totalHeight = data.map(item => item.height).reduce((acc, currentValue) => acc + currentValue, 0);\n    if(totalHeight){\n        averageHeight = totalHeight/data.length;\n    }\n\n    return (\n        <div className=\"chart-container\">\n            <h4 className=\"text-center\">Height Statistics</h4>\n            <CChart\n                type=\"doughnut\"\n                data={{\n                    labels: ['Average', 'Initial'],\n                    datasets: [\n                    {\n                        backgroundColor: ['#FF4500','#157DEC'],\n                        data: [averageHeight, initialHeight],\n                    },\n                    ],\n                }}\n                options={{\n                    plugins: {\n                    legend: {\n                        labels: {\n                        // color: getStyle('--cui-body-color'),\n                        }\n                    }\n                    },\n                }}\n                />\n        </div>\n    )\n}\n\nexport default HeightPieChart;","import { CChart } from \"@coreui/react-chartjs\"\nimport './chart.css'\nimport { useEffect, useState } from \"react\"\nimport { supabase } from \"../../helper/supabaseClient\"\n\nconst TotalMealFoodPieChart = () => {\n    const [foodCount, setFoods] = useState(null)\n    const [mealCount, setMeals] = useState(null)\n    \n    const fetchFoods = async () => {\n      try {\n        const {\n          data: {\n            user\n          },\n        } = await supabase.auth.getUser()\n        // Fetch logged-in user's goals data\n        const {\n          data,\n          error\n        } = await supabase\n          .from('foods')\n          .select('*')\n          .order('created_at', {\n            ascending: false\n          })\n\n        if (error) {\n          throw error\n        }\n\n        // Set Foods data in state\n        setFoods(data.length || 0)\n      } catch (error) {\n        console.error('Error fetching Foods:', error.message)\n      }\n    }\n\n    const fetchMeals = async () => {\n        try {\n          const {\n            data: { user },\n          } = await supabase.auth.getUser()\n    \n          const { data, error } = await supabase\n            .from('meals')\n            .select(`'*'`)\n            .order('created_at', { ascending: false })\n          setMeals(data.length || 0)\n          if (error) {\n            throw error\n          }\n        } catch (error) {\n          console.error('Error fetching Meals:', error.message)\n        }\n      }\n\n    useEffect(() => {\n      fetchFoods()\n      fetchMeals()\n    }, [])\n\n    return (\n        <div className=\"chart-container\">\n            <h4 className=\"text-center\">Meals/Foods Statistics</h4>\n            <CChart\n                type=\"doughnut\"\n                data={{\n                    labels: ['Total Meal', 'Total Food'],\n                    datasets: [\n                    {\n                        backgroundColor: ['#800080','#25383C'],\n                        data: [mealCount, foodCount],\n                    },\n                    ],\n                }}\n                options={{\n                    plugins: {\n                    legend: {\n                        labels: {\n                        // color: getStyle('--cui-body-color'),\n                        }\n                    }\n                    },\n                }}\n                />\n        </div>\n    )\n}\n\nexport default TotalMealFoodPieChart;","import { CChart } from \"@coreui/react-chartjs\"\nimport './chart.css'\n\nconst WeightPieChart = ({data, weight = 0}) => {\n    const initialWeight = weight;\n    let averageWeight = weight;\n    const totalWeight = data.map(item => item.weight).reduce((acc, currentValue) => acc + currentValue, 0);\n    if(totalWeight){\n        averageWeight = totalWeight/data.length;\n    }\n\n    return (\n        <div className=\"chart-container\">\n            <h4 className=\"text-center\">Weight Statistics</h4>\n            <CChart\n                type=\"doughnut\"\n                data={{\n                    labels: ['Average','Initial'],\n                    datasets: [\n                    {\n                        backgroundColor: ['#0000FF','#00D8FF'],\n                        data: [averageWeight, initialWeight],\n                    },\n                    ],\n                }}\n                options={{\n                    plugins: {\n                    legend: {\n                        labels: {\n                        // color: getStyle('--cui-body-color'),\n                        }\n                    }\n                    },\n                }}\n                />\n        </div>\n    )\n}\n\nexport default WeightPieChart;","import React, { useEffect, useState } from 'react';\n\nconst config = {\n    quotesApiUrl: 'https://type.fit/api/quotes',\n}\n  \nconst DailyQuoteNotification = () => {\n  const [quote, setQuote] = useState('')\n\n  useEffect(() => {\n    const getQuote = async () => {\n        fetch(config.quotesApiUrl)\n          .then((response) => response.json())\n          .then((data) => {\n            if (data && data.length > 0) {\n              const randomIndex = Math.floor(Math.random() * data.length)\n              const randomQuote = data[randomIndex]\n              randomQuote.author = randomQuote.author.replace(', type.fit', '')\n              console.log(randomQuote.text)\n              setQuote(randomQuote.text)\n            }\n          })\n          .catch((error) => {\n            console.error('Error fetching quote:', error.message)\n        })\n    }\n\n    const showNotification = async () => {\n        await getQuote()\n        if (!('Notification' in window)) {\n          console.log('This browser does not support desktop notification');\n        } else {\n          Notification.requestPermission().then(permission => {\n            if (permission === 'granted') {\n              const notification = new Notification('Today\\'s Quote from Zero Fitness', {\n                body: quote,\n                icon: '/static/media/logo.63fd68bfce01b503da54.png' // Optional icon for the notification\n              });\n            } else {\n              console.log('Notification permission denied');\n            }\n          });\n        }\n      };  \n\n    getQuote()\n\n    // Schedule the notification to repeat every 5 minutes\n    const intervalId = setInterval(showNotification, 5 * 60 * 1000);\n    return () => clearInterval(intervalId);\n\n  }, []);\n\n  return (\n    <div>\n      {/* Your React application content */}\n    </div>\n  );\n};\n\nexport default DailyQuoteNotification;\n","import React, { useState, useEffect } from 'react'\nimport { CCard, CTableDataCell, CTabContent, CTabPane, CTable, CTableHead, CTableBody, CTableRow, CTableHeaderCell, CNav, CNavItem, CNavLink, CButton, CCardBody, CCardHeader, CCardTitle, CCardText, CRow, CCol } from '@coreui/react'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\nimport { supabase } from '../../helper/supabaseClient'\n\nimport '../../../src/assets/css/quote.css'\nimport StepBarChart from '../../components/chart/StepBarChart'\nimport HeightPieChart from '../../components/chart/HeightPieChart'\nimport TotalMealFoodPieChart from '../../components/chart/TotalMealFoodPieChart'\nimport WeightPieChart from '../../components/chart/WeightPieChart'\nimport DailyQuoteNotification from '../../components/notification/DailyQuoteNofication'\n\nconst config = {\n  quotesApiUrl: 'https://type.fit/api/quotes',\n}\n\nconst Dashboard = () => {\n  const [activeKey, setActiveKey] = useState(1)\n  const [profile, setProfile] = useState([])\n  const [quote, setQuote] = useState([])\n  const [syncing, setSyncing] = useState(false);\n  const [fitnessData, setFitnessData] = useState([]);\n  const [isRedirectedToHome, setIsRedirectedToHome] = useState(false);\n\n  useEffect(() => {\n    // const isSync = localStorage.getItem('isSync');\n      const authorizationCode = new URLSearchParams(window.location.search).get('code');\n      if (authorizationCode) {\n        handleAuthorizationCode(authorizationCode);\n      }else{\n        fetchFitApiData()\n      }\n    \n    getQuote()\n    fetchProfile()\n  }, [])\n\n  const getQuote = () => {\n    fetch(config.quotesApiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data && data.length > 0) {\n          const randomIndex = Math.floor(Math.random() * data.length)\n          const randomQuote = data[randomIndex]\n          randomQuote.author = randomQuote.author.replace(', type.fit', '')\n          setQuote(randomQuote)\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching quote:', error.message)\n      })\n  }\n\n  const fetchFitApiData = async () => {\n    setSyncing(false);\n    try {\n      const response = await fetch('https://api-fit-app.netlify.app/api/googleFit');\n      const data = await response.json();\n\n      window.location.href = data.authUrl;\n    } catch (error) {\n      console.error('Error syncing Fit Data:', error);\n    } finally {\n      setSyncing(true);\n    }\n  }\n\n  const handleAuthorizationCode = async (code) => {\n    try {\n      const response = await fetch(`https://api-fit-app.netlify.app/api/googleFit/callback?code=${code}`);\n      const data = await response.json();\n      if (data.isRedirectedToHome) {\n        setFitnessData(data.data);\n        const urlWithoutCode = window.location.origin + window.location.pathname;\n        window.history.replaceState({}, document.title, urlWithoutCode);\n      }\n    } catch (error) {\n      console.error('Error fetching fitness data:', error);\n    }\n  };\n\n  const fetchProfile = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      const { data, error } = await supabase.from('profiles').select('*').eq('id', user.id).single()\n\n      if (error) {\n        throw error\n      }\n\n      setProfile(data || [])\n    } catch (error) {\n      console.error('Error fetching profile:', error.message)\n    }\n  }\n\n  return (\n    <>\n      <CCard className=\"text-center mb-4 quote-card\">\n        <CCardHeader  className=\"quote-header\">\n          Quote Of The Day\n        </CCardHeader>\n        <CCardBody>\n          <CCardTitle className=\"quote-text\">{quote['text']}</CCardTitle>\n          <CCardText className=\"quote-author\">{quote['author']}</CCardText>\n        </CCardBody>\n      </CCard>\n      {/* <WidgetsDropdown /> */}\n      {quote ?\n      <DailyQuoteNotification></DailyQuoteNotification>\n      :null}\n      <CRow>\n        <CCol>\n            {fitnessData ?\n              <WeightPieChart data={fitnessData} weight={profile.weight}></WeightPieChart>\n              :null\n            }\n        </CCol>\n        <CCol>\n            {fitnessData ?\n              <HeightPieChart data={fitnessData} height={profile.height}></HeightPieChart>\n              :null\n            }\n        </CCol>\n        <CCol>\n        {fitnessData ?\n              <TotalMealFoodPieChart></TotalMealFoodPieChart>\n              :null\n            }\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol>\n        {fitnessData ?\n          <StepBarChart data={fitnessData}></StepBarChart>\n          :null\n        }\n        </CCol>\n      </CRow>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Last 7 Days Fit Data</CCardHeader>\n        <CCardBody>\n          <CTabContent>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"all-tab-pane\" visible={activeKey === 1}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Date</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Step Count</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Weight</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Height</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Heart Rate</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {fitnessData ? fitnessData.map((data) => (\n                    <CTableRow>\n                      <CTableDataCell>{data.date}</CTableDataCell>\n                      <CTableDataCell>{data.step_count}</CTableDataCell>\n                      <CTableDataCell>{data.weight}</CTableDataCell>\n                      <CTableDataCell>{data.height_in_cms}</CTableDataCell>\n                      <CTableDataCell>{data.heart_rate}</CTableDataCell>\n                    </CTableRow>\n                  )) : null\n                  }\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n          </CTabContent>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Dashboard\n"],"names":["_ref","data","labels","steps","reduce","acc","_ref2","date","step_count","push","Date","getDay","_jsxs","className","children","_jsx","CChart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","plugins","legend","display","color","font","size","family","scales","x","grid","ticks","y","height","initialHeight","averageHeight","totalHeight","map","item","currentValue","length","TotalMealFoodPieChart","foodCount","setFoods","useState","mealCount","setMeals","useEffect","async","user","supabase","auth","getUser","error","from","select","order","ascending","console","message","fetchFoods","fetchMeals","weight","initialWeight","averageWeight","totalWeight","config","DailyQuoteNotification","quote","setQuote","getQuote","fetch","then","response","json","randomQuote","Math","floor","random","author","replace","log","text","catch","intervalId","setInterval","window","Notification","requestPermission","permission","body","icon","clearInterval","Dashboard","activeKey","setActiveKey","profile","setProfile","syncing","setSyncing","fitnessData","setFitnessData","isRedirectedToHome","setIsRedirectedToHome","authorizationCode","URLSearchParams","location","search","get","handleAuthorizationCode","fetchFitApiData","fetchProfile","href","authUrl","concat","code","urlWithoutCode","origin","pathname","history","replaceState","document","title","eq","id","single","_Fragment","CCard","CCardHeader","CCardBody","CCardTitle","CCardText","CRow","CCol","WeightPieChart","HeightPieChart","StepBarChart","CTabContent","CTabPane","role","visible","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","CTableDataCell","height_in_cms","heart_rate"],"sourceRoot":""}