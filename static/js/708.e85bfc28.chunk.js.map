{"version":3,"file":"static/js/708.e85bfc28.chunk.js","mappings":"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","sources":["views/goals/Goals.js"],"sourcesContent":["import React, { useEffect, useState, createRef } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CNav,\n  CTabPane,\n} from '@coreui/react'\n\nimport { supabase } from '../../helper/supabaseClient'\n// const moment = require('moment');\nimport moment  from 'moment'\n\nconst Goals = () => {\n  const [activeKey, setActiveKey] = useState(1)\n  const [goals, setGoals] = useState([])\n  const [goalsW, setGoalsW] = useState([])\n  const [goalsActivity, setGoalsActivity] = useState([]);\n\n  useEffect(() => {\n    fetchGoals()\n    fetchGoalsW()\n    fetchGoalsActivity()\n  }, [])\n\n  const fetchGoals = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('goals')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setGoals(data || [])\n    } catch (error) {\n      console.error('Error fetching all goals:', error.message)\n    }\n  }\n\n  const fetchGoalsW = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      const { data, error } = await supabase\n        .from('goals')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('type', 'weight')\n        .eq('user_id', user.id)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setGoalsW(data || [])\n    } catch (error) {\n      console.error('Error fetching goals weight:', error.message)\n    }\n  }\n\n  const fetchGoalsActivity = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      const { data, error } = await supabase\n        .from('goals')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('type', 'activity')\n        .eq('user_id', user.id)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setGoalsActivity(data || [])\n    } catch (error) {\n      console.error('Error fetching goals activity:', error.message)\n    }\n  }\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Goals</CCardHeader>\n        <CCardBody>\n          <CNav variant=\"pills\" role=\"tablist\">\n            {/* all */}\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 1}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"all-tab-pane\"\n                aria-selected={activeKey === 1}\n                onClick={() => setActiveKey(1)}\n              >\n                All\n              </CNavLink>\n            </CNavItem>\n            {/* weight-goal */}\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 2}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"weight-tab-pane\"\n                aria-selected={activeKey === 2}\n                onClick={() => setActiveKey(2)}\n              >\n                Weight\n              </CNavLink>\n            </CNavItem>\n            {/* activity-goal */}\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 3}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"activities-tab-pane\"\n                aria-selected={activeKey === 3}\n                onClick={() => setActiveKey(3)}\n              >\n                Activities\n              </CNavLink>\n            </CNavItem>\n          </CNav>\n          <CTabContent>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"all-tab-pane\" visible={activeKey === 1}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Type</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Timeline</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Duration</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {goals.map((goal) => (\n                    <CTableRow key={goal.id}>\n                      <CTableDataCell>{goal.title}</CTableDataCell>\n                      <CTableDataCell>{goal.type}</CTableDataCell>\n                      \n                      <CTableDataCell>{moment(goal.end_at).format('YYYY-MM-DD  HH:mm:ss')}</CTableDataCell>\n                      <CTableDataCell>{goal.goal_amount}</CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"weight-tab-pane\" visible={activeKey === 2}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Type</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Timeline</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Duration</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {goalsW.map((goalw) => (\n                    <CTableRow key={goalw.id}>\n                      <CTableDataCell>{goalw.title}</CTableDataCell>\n                      <CTableDataCell>{goalw.type}</CTableDataCell>\n                      <CTableDataCell>{moment(goalw.end_at).format('YYYY-MM-DD  HH:mm:ss')}</CTableDataCell>\n                      <CTableDataCell>{goalw.goal_amount}</CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n            <CTabPane\n              role=\"tabpanel\"\n              aria-labelledby=\"acivities-tab-pane\"\n              visible={activeKey === 3}\n            >\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Title</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Type</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Timeline</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Duration</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                {goalsActivity.map((goalActivity) => (\n                    <CTableRow key={goalActivity.id}>\n                      <CTableDataCell>{goalActivity.title}</CTableDataCell>\n                      <CTableDataCell>{goalActivity.type}</CTableDataCell>\n                      <CTableDataCell>{moment(goalActivity.end_at).format('YYYY-MM-DD  HH:mm:ss')}</CTableDataCell>\n                      <CTableDataCell>{goalActivity.goal_amount}</CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n          </CTabContent>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Goals\n"],"names":["Goals","activeKey","setActiveKey","useState","goals","setGoals","goalsW","setGoalsW","goalsActivity","setGoalsActivity","useEffect","fetchGoals","fetchGoalsW","fetchGoalsActivity","async","data","user","supabase","auth","getUser","error","from","select","order","ascending","eq","id","console","message","_jsx","_Fragment","children","_jsxs","CCard","className","CCardHeader","CCardBody","CNav","variant","role","CNavItem","CNavLink","active","component","onClick","CTabContent","CTabPane","visible","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","goal","CTableDataCell","title","type","moment","end_at","format","goal_amount","goalw","goalActivity"],"sourceRoot":""}