{"version":3,"file":"static/js/56.13d1f6fe.chunk.js","mappings":"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","sources":["views/activities/Activities.js"],"sourcesContent":["import React, { useEffect, useState, createRef } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CNav,\n  CTabPane,\n} from '@coreui/react'\n\nimport { supabase } from '../../helper/supabaseClient'\nimport moment from 'moment'\n\nconst Activities = () => {\n  const [activeKey, setActiveKey] = useState(1)\n  const [activities, setActivities] = useState([])\n  const [walkings, setWalkings] = useState([])\n  const [runnings, setRunnings] = useState([])\n  const [cyclings, setCyclings] = useState([])\n  const [swimmings, setSwimmings] = useState([])\n  \n  useEffect(() => {\n    fetchActivities()\n    fetchRunnings()\n    fetchWalkings()\n    fetchSwimmings()\n    fetchCyclings()\n  }, [])\n\n  const fetchActivities = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('activity_records')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setActivities(data || [])\n    } catch (error) {\n      console.error('Error fetching Activities:', error.message)\n    }\n  }\n\n  const fetchRunnings = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('activity_records')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n        .eq('activity_id', 4)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setRunnings(data || [])\n    } catch (error) {\n      console.error('Error fetching runnings:', error.message)\n    }\n  }\n\n  const fetchWalkings = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('activity_records')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n        .eq('activity_id', 1)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setWalkings(data || [])\n    } catch (error) {\n      console.error('Error fetching walkings:', error.message)\n    }\n  }\n\n  const fetchSwimmings = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('activity_records')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n        .eq('activity_id', 3)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setSwimmings(data || [])\n    } catch (error) {\n      console.error('Error fetching swimmings:', error.message)\n    }\n  }\n\n  const fetchCyclings = async () => {\n    try {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      // Fetch logged-in user's goals data\n      const { data, error } = await supabase\n        .from('activity_records')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .eq('user_id', user.id)\n        .eq('activity_id', 2)\n\n      if (error) {\n        throw error\n      }\n\n      // Set goals data in state\n      setCyclings(data || [])\n    } catch (error) {\n      console.error('Error fetching cyclings:', error.message)\n    }\n  }\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Activities</CCardHeader>\n        <CCardBody>\n          <CNav variant=\"pills\" role=\"tablist\">\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 1}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"all-tab-pane\"\n                aria-selected={activeKey === 1}\n                onClick={() => setActiveKey(1)}\n              >\n                All\n              </CNavLink>\n            </CNavItem>\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 2}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"walking-tab-pane\"\n                aria-selected={activeKey === 2}\n                onClick={() => setActiveKey(2)}\n              >\n                Walking\n              </CNavLink>\n            </CNavItem>\n\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 3}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"running-tab-pane\"\n                aria-selected={activeKey === 3}\n                onClick={() => setActiveKey(3)}\n              >\n                Running\n              </CNavLink>\n            </CNavItem>\n\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 4}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"cycling-tab-pane\"\n                aria-selected={activeKey === 4}\n                onClick={() => setActiveKey(4)}\n              >\n                Cycling\n              </CNavLink>\n            </CNavItem>\n\n            <CNavItem role=\"presentation\">\n              <CNavLink\n                active={activeKey === 5}\n                component=\"button\"\n                role=\"tab\"\n                aria-controls=\"swimming-tab-pane\"\n                aria-selected={activeKey === 5}\n                onClick={() => setActiveKey(5)}\n              >\n                Swimming\n              </CNavLink>\n            </CNavItem>\n           \n          </CNav>\n          <CTabContent>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"all-tab-pane\" visible={activeKey === 1}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Elapsed Time</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Activity</CTableHeaderCell>\n                    {/* <CTableHeaderCell scope=\"col\">Amount</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Distance</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Energy</CTableHeaderCell> */}\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {activities.map((activitie) => (\n                    <CTableRow key={activitie.id}>\n                     \n                      <CTableDataCell>\n                        {moment(activitie.end_at).diff(moment(activitie.start_at), 'minutes')} {' minutes'}\n                      </CTableDataCell>\n                      <CTableDataCell>{activitie.title}</CTableDataCell>\n                      {/* <CTableDataCell>{activitie.activity_amount}</CTableDataCell>\n                      <CTableDataCell>{activitie.distance}</CTableDataCell>\n                      <CTableDataCell>{activitie.energy}</CTableDataCell> */}\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"walking-tab-pane\" visible={activeKey === 2}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">Elapsed Time</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Activity</CTableHeaderCell>\n                    {/* <CTableHeaderCell scope=\"col\">Amount</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Distance</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Energy</CTableHeaderCell> */}\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {walkings.map((walking) => (\n                    <CTableRow key={walking.id}>\n                      <CTableDataCell>{moment(walking.end_at).diff(moment(walking.start_at), 'minutes')} {' minutes'}</CTableDataCell>\n                      <CTableDataCell>{walking.title}</CTableDataCell>\n                      {/* <CTableDataCell>{walking.activity_amount}</CTableDataCell>\n                      <CTableDataCell>{walking.distance}</CTableDataCell>\n                      <CTableDataCell>{walking.energy}</CTableDataCell> */}\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"running-tab-pane\" visible={activeKey === 3}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                  <CTableHeaderCell scope=\"col\">Elapsed Time</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Activity</CTableHeaderCell>\n                    {/* <CTableHeaderCell scope=\"col\">Amount</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Distance</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Energy</CTableHeaderCell> */}\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {runnings.map((running) => (\n                    <CTableRow key={running.id}>\n                      <CTableDataCell>{moment(running.end_at).diff(moment(running.start_at), 'minutes')} {' minutes'}</CTableDataCell>\n                      <CTableDataCell>{running.title}</CTableDataCell>\n                      {/* <CTableDataCell>{running.activity_amount}</CTableDataCell>\n                      <CTableDataCell>{running.distance}</CTableDataCell>\n                  <CTableDataCell>{running.energy}</CTableDataCell> */}\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"cycling-tab-pane\" visible={activeKey === 4}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                  <CTableHeaderCell scope=\"col\">Elapsed Time</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Activity</CTableHeaderCell>\n                    {/* <CTableHeaderCell scope=\"col\">Amount</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Distance</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Energy</CTableHeaderCell> */}\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                {cyclings.map((cycling) => (\n                    <CTableRow key={cycling.id}>\n                      <CTableDataCell>{moment(cycling.end_at).diff(moment(cycling.start_at), 'minutes')} {' minutes'}</CTableDataCell>\n                      <CTableDataCell>{cycling.title}</CTableDataCell>\n                      {/* <CTableDataCell>{cycling.activity_amount}</CTableDataCell>\n                      <CTableDataCell>{cycling.distance}</CTableDataCell>\n                      <CTableDataCell>{cycling.energy}</CTableDataCell> */}\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n\n            <CTabPane role=\"tabpanel\" aria-labelledby=\"swimming-tab-pane\" visible={activeKey === 5}>\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                  <CTableHeaderCell scope=\"col\">Elapsed Time</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Activity</CTableHeaderCell>\n                    {/* <CTableHeaderCell scope=\"col\">Amount</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Distance</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Energy</CTableHeaderCell> */}\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                {swimmings.map((swimming) => (\n                    <CTableRow key={swimming.id}>\n                      <CTableDataCell>{moment(swimming.end_at).diff(moment(swimming.start_at), 'minutes')} {' minutes'}</CTableDataCell>\n                      <CTableDataCell>{swimming.title}</CTableDataCell>\n                      {/* <CTableDataCell>{swimming.activity_amount}</CTableDataCell>\n                      <CTableDataCell>{swimming.distance}</CTableDataCell>\n                      <CTableDataCell>{swimming.energy}</CTableDataCell> */}\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CTabPane>\n           \n          </CTabContent>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Activities\n"],"names":["Activities","activeKey","setActiveKey","useState","activities","setActivities","walkings","setWalkings","runnings","setRunnings","cyclings","setCyclings","swimmings","setSwimmings","useEffect","fetchActivities","fetchRunnings","fetchWalkings","fetchSwimmings","fetchCyclings","async","data","user","supabase","auth","getUser","error","from","select","order","ascending","eq","id","console","message","_jsx","_Fragment","children","_jsxs","CCard","className","CCardHeader","CCardBody","CNav","variant","role","CNavItem","CNavLink","active","component","onClick","CTabContent","CTabPane","visible","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","map","activitie","CTableDataCell","moment","end_at","diff","start_at","title","walking","running","cycling","swimming"],"sourceRoot":""}